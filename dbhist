# ============================================================================================ #
#: Title           : dbhist                                                                    #
#: Sypnosis        : dbhist [OPTIONS]... [QUERY]...                                            #
#: Date Created    : Sat 25 Nov 2017 10:10:47 AM +08  /  Sat Nov 25 02:10:47 UTC 2017          #
#: Last Edit       : Thu 14 Dec 2017 15:17:40 PM +08  /  Thu Dec 14 07:17:40 UTC 2017          #
#: License         : MIT                                                                       #
#: Version         : 1.2.0                                                                     #
#: Maintainer      : Jason V. Ferrer '<jetchisel@opensuse.org>'                                #
#: Description     : log bash_history in a database (A fork of dbhist.sh from Dennis Gladkikh) #
#: Options         : [abhlpsuVHS]                                                              #
#: Home Page       :                                                                           #
#: ExtComm         : sqlite3                                                                   #
# ============================================================================================ #

################################################################################################
# The MIT License                                                                              #
# SPDX short identifier: MIT                                                                   #
#                                                                                              #
# Further resources on the MIT License                                                         #
# Copyright 2017 Denis Gladkikh (https://www.outcoldman.com/en/archive/2017/07/19/dbhist/)     #
#                                                                                              #
# Permission is hereby granted, free of charge, to any person obtaining a copy                 #
# of this software and associated documentation files (the "Software"), to deal                #
# in the Software without restriction, including without limitation the rights                 #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell                    #
# copies of the Software, and to permit persons to whom the Software is                        #
# furnished to do so, subject to the following conditions:                                     #
#                                                                                              #
# The above copyright notice and this permission notice shall be included in                   #
# all copies or substantial portions of the Software.                                          #
#                                                                                              #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                   #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                     #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                  #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                       #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE                #
# SOFTWARE.                                                                                    #
#                                                                                              #
#==============================================================================================#
#                                                                                              #
# To use it, just source the file `source dbhist.sh`                                           #
#                                                                                              #
# Configuration                                                                                #
#   DBHISTORY=true - use false to disable                                                      #
#   DBHISTORYFILE=$HOME/.dbhist - location of dbhist file                                      #
#                                                                                              #
# To make it work I keep next configuration for bash, the only important is the                #
# time format, to make it unixtime                                                             #
#                                                                                              #
#   HISTSIZE=$HOME/.bash_history                                                               #
#   HISTFILESIZE=1000                                                                          #
#   HISTSIZE=1000                                                                              #
#   HISTTIMEFORMAT="%s "                                                                       #
#   HISTCONTROL=ignorespace:erasedups                                                          #
#                                                                                              #
#                                                                                              #
################################################################################################

# ******************************************************************************************** #
#                                                                                              #
#                       Enable extglob, just in case it is not enabled.                        #
#                                                                                              #
# ******************************************************************************************** #

shopt -s extglob

# ******************************************************************************************** #
#                                                                                              #
#                           Name of the script without the Pathname.                           #
#                                                                                              #
# ******************************************************************************************** #

____script_name____=${BASH_SOURCE##*/}

# ******************************************************************************************** #
#                                                                                              #
#                               Function to show the help menu.                                #
#                                                                                              #
# ******************************************************************************************** #

____ShowHelp____() {

  local IFS help

IFS=$'\n' read -rd '' help <<<'
USAGE: dbhist [OPTIONS]... [QUERY]...

Records bash_history to a database and query it.
Without any options/arguments the default is to show
the recent commands if there is/are any in the current
session.

OPTIONS:
  -a, --all        include history of all sessions. Not only current.
  -b, --begin      match only commands starts with query.
  -h, --help       Show this help.
  -l, --limit n    n numbers of latest commands to show. Defaults to 100.
  -p, --pwd        show working directory of cmd.
  -s, --self       include history about dbhist.
  -u, --under      reduce search only for current and under pwd.
  -v, --verbose    verbose output (shows sql command).
  -H, --here       reduce search only for current pwd.
  -S, --shell      access to the sqlite3 shell.

A newly open shell does not have any commands to show
unless the -a option is specified, which defaults to
100 lines, unless the -l option is specified.

The first column shows only the increment of the executed commands.
The second column shows the date and time of the executed commands.
The third column shows how many times the commands has been executed.
The fourth and fifth column shows the exit status of the executed commands.
The sixth column which is specified by the -p option shows the pwd of the executed commands.
The last column is the executed commands.

NOTE:
  Not all commands that exited with a non-zero is a failure, likewise not all commands
  that exited with zero is a success.
'
  printf '%s\n' "$help"
}

# ******************************************************************************************** #
#                                                                                              #
#                                      The magic starts.                                       #
#                                                                                              #
# ******************************************************************************************** #

if ${DBHISTORY:-true}; then

  # Kind of session ID, allows to see only commands executed in this terminal session
  __dbhist_salt="${RANDOM}${RANDOM}"
  # This allows us to verify existence of .dbhist file only once
  __dbhist_initialized=false
  # Keep the previous folder, this how we keep the PWD for commands like `cd ...`
  __dbhist_oldpwd="${OLDPWD}"

  __dbhist_empty_data_base=0
  __dbhist_does_not_exists=0

  # Get location of .dbhist file, default location is under `$HOME/.dbhist`
  __dbhist_file="${DBHISTORYFILE:-$HOME/.bash_history.sqlite}"

  # Execute command on sqlite with .dbhist file
  __dbhist_sqlite() {
    sqlite3 "$__dbhist_file"
  }

  # Initialize dbhist file, create table
  __db_hist_init() {
    local __sql='CREATE TABLE history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    hist_id INTEGER,
    cmd TEXT,
    epoch INTEGER,
    ppid INTEGER,
    status TEXT,
    exit_status INTEGER,
    pwd TEXT,
    salt INTEGER
    );'

    if [[ ! -f "$__dbhist_file" ]]; then
       __dbhist_sqlite <<< "${__sql}"
    fi
  }

  # Execute it with bash PROMPT_COMMAND
  __db_hist_prompt() {
    if [[ -f ~/dotfiles/prompt ]]; then
      source ~/dotfiles/prompt
    else
      Last_Command=$?
    fi

    if ! ${__dbhist_initialized}; then
      __db_hist_init
      __dbhist_initialized=true
      return
    fi

    if ((!__dbhist_does_not_exists)); then
      if [[ ! -f $__dbhist_file ]]; then
        printf '%s: %s\n' "$____script_name____" "It looks like $__dbhist_file does not exists, please verify it." >&2
        printf '%s: %s\n' "$____script_name____" "run: file $__dbhist_file" >&2
        __dbhist_does_not_exists=1
        return
      fi
    fi

    if ((!__dbhist_empty_data_base)); then
      if [[ ! -s $__dbhist_file  ]]; then
        printf '%s: %s\n' "$____script_name____" "It looks like $__dbhist_file is empty, please verify it." >&2
        printf '%s: %s\n' "$____script_name____" "run: file $__dbhist_file" >&2
        __dbhist_empty_data_base=1
        return
      fi
    fi

    if [[ -n ${COMP_LINE} ]]; then
      return
    fi

    local IFS
    local line
    local __formated_history=""
    local __num=""
    local __epoch=""
    local __pwd=${PWD}
    local __command=""
    local first=
    local secondtemp0=""
    local secondtemp1=""
    local second=""
    local thirdtemp0=""
    local third=""

    if [[ ${OLDPWD} !=  ${__dbhist_oldpwd} ]]; then
      __pwd=${OLDPWD}
      __dbhist_oldpwd=${OLDPWD}
    fi

# ******************************************************************************************** #
#                                                                                              #
# Set IFS to a newline, use reads -d option, so multiline command such a heredocs is captured. #
#                                                                                              #
# ******************************************************************************************** #

    IFS=$'\n' read -u 5 -rd ''  __formated_history 5< <(history 1)

# ******************************************************************************************** #
#                                                                                              #
#   Parameter expansion to extract the data/info from "history 1" and split it into 3 parts.   #
#                                                                                              #
# ******************************************************************************************** #

    read -u 6 -r line 6<<< "$__formated_history"
    first="${line%%[[:space:]]*}"
    secondtemp0="${line##*"${first}"}"
    secondtemp1=${secondtemp0##*( )}
    second="${secondtemp1%%[[:space:]]*}"

    IFS=$'\n' read -u 7 -rd '' line  7<<< "$__formated_history"
    thirdtemp0="${line##*"${second}"}"
    third="${thirdtemp0##*( )}"

    __num=$first
    __epoch=$second
    __command=$third

# ******************************************************************************************** #
#                                                                                              #
#   Use a while read loop, just in case the last command is a multiline cmd, e.g. heredocs.    #
#                                                                                              #
# ******************************************************************************************** #


    __dbhist_sqlite <<-END
INSERT INTO history(hist_id, epoch, cmd, ppid, status, exit_status, pwd, salt)
VALUES(
  "${__num}",
  "${__epoch}",
  "${__command//\"/\"\"}",
  "${PPID}",
  "Status",
  "${Last_Command}",
  "${__pwd//\"/\"\"}",
  "${__dbhist_salt}"
);
END
}

  dbhist() {

# ******************************************************************************************** #
#                                                                                              #
#                         Local variables from dbhist prompt function.                         #
#                                                                                              #
# ******************************************************************************************** #

     local __limit=100
     local __all=false
     local __self=false
     local __begin=false
     local __verbose=false
     local __query=""
     local __location=""
     local __pwd=false

# ******************************************************************************************** #
#                                                                                              #
#                          Parse the command line arguments/options.                           #
#                                                                                              #
# ******************************************************************************************** #

     while (($#)); do
       case $1 in
         --shell|-S)
           __dbhist_sqlite
           return
           ;;
         --help|-h)
           ____ShowHelp____
           return
           ;;
         --limit|-l)
           shift
           __limit=${1:?option require value}
           if [[ $__limit != +([0-9]) ]]; then
             printf '%s: %s\n' "$____script_name____" 'Limit should be a number!' >&2
             return 1
           fi
           ;;
         --all|-a)
           __all=true
           ;;
         --self|-s)
           __self=true
           ;;
         --begin|-b)
           __begin=true
           ;;
         --verbose|-v)
           __verbose=true
           ;;
         --here|-H)
           if [[ -n ${__location} ]]; then
             printf '%s: %s\n' "$____script_name____" 'Specifier for pwd already set!' >&2
             return 1
           fi
           __location=here
           ;;
         --under|-u)
           if [[ -n ${__location} ]]; then
             printf '%s: %s\n' "$____script_name____" 'Specifier for pwd already set!' >&2
             return 1
           fi
           __location=under
           ;;
         --pwd|-p)
           __pwd=true
           ;;
         -*)
           printf '%s: %s: %s\n' "$____script_name____" "Unknown option" "$1" >&2
           return 1
           ;;
         *)
           if [[ -n ${__query} ]]; then
             printf  '%s: %s\n' "$____script_name____" "Cannot specify more than one query!" >&2
             return 1
           fi
           __query=${1:?requires value}
           ;;
       esac
       shift
     done

     __pwd_q=""
     if ${__pwd}; then
       __pwd_q='pwd || " > " ||'
     fi

     local __sql="
     SELECT
     substr('      '||max(id),-6) ||
       ' | ' ||
       datetime(max(epoch), 'unixepoch', 'localtime') ||
       ' | ' ||
       substr('      '||count(*),-6) ||
       ' | ' ||
       substr('      '||max(status),-6) ||
       ': ' ||
       substr('      '||max(exit_status),-4) ||
       ' | ' ||
       ${__pwd_q}
     cmd
     FROM history
     WHERE 1 "

     if ! ${__all}; then
       __sql+="AND (salt=${__dbhist_salt} AND ppid=${PPID}) "
     fi

     if ! ${__self}; then
       __sql+="AND (cmd != 'dbhist' AND cmd NOT LIKE 'dbhist %') "
     fi

     if [[ -n ${__query} ]]; then
       __query=${__query//\"/\"\"}
       if ! ${__begin} && [[ ${__query} != %* ]]; then
         __query="%${__query}"
       fi
       if [[ "${__query}" != *% ]]; then
         __query+="%"
       fi
       __sql+="AND cmd LIKE \"${__query}\" ESCAPE '\' "
     fi

     __pwd_l=${PWD//\"/\"\"}

     case ${__location} in
       here)
         __sql+="AND (pwd == \"${__pwd_l}\") "
         ;;
       under)
         __pwd_l=${__pwd_l//%/\%}
         __pwd_l=${__pwd_l//_/\_}
         __sql+="AND (pwd LIKE \"${__pwd_l}%\" ESCAPE '\') "
         ;;
     esac

     __sql+="GROUP BY cmd "

     if ${__pwd}; then
       __sql+=", pwd "
     fi

     __sql+="ORDER BY max(id) DESC LIMIT ${__limit} ;"

     if ${__verbose}; then
       printf '%s\n' "database: $__dbhist_file" 'sql:' "${__sql}" "${blank_line:-""}"
     fi

     __dbhist_sqlite <<< "${__sql}"
  }

fi

# ******************************************************************************************** #
#                                                                                              #
#          assign the function __db_hist_prompt to the bash variable PROMPT_COMMAND.           #
#                                                                                              #
# ******************************************************************************************** #

  PROMPT_COMMAND="__db_hist_prompt${PROMPT_COMMAND:+; $PROMPT_COMMAND}"

# ============================================================================================ #
#                                                                                              #
#                                   >>> END OF SCRIPT <<<                                      #
#                                                                                              #
# ============================================================================================ #
